{"ast":null,"code":"var _jsxFileName = \"C:\\\\new_IUA\\\\IUA2\\\\my-app\\\\src\\\\chatroom.js\";\nimport './chatroom.css';\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport back from './img/back.png';\nimport { Back } from './components/Style.js';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ChatRoom extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initializeStompClient = () => {\n      const socket = new SockJS('/chatroom');\n      this.stompClient = Stomp.over(socket);\n      const {\n        userName,\n        apiRoom\n      } = this.state;\n      console.log(\"Initializing WebSocket connection...\" + userName);\n      this.stompClient.connect({\n        user: userName\n      }, frame => {\n        console.log(\"WebSocket connection established:\", frame);\n        this.setState({\n          connected: true\n        });\n        console.log('Connected: ' + frame);\n        //this.stompClient.subscribe(`/topic/${apiRoom}`\n        this.stompClient.subscribe(`/topic/${apiRoom}`, messageOutput => {\n          this.showMessageOutput(JSON.parse(messageOutput.body));\n        });\n        /*\n        this.stompClient.subscribe('/user/subscribe', (messageOutput) => {\n         this.showMessageOutput(JSON.parse(messageOutput.body));\n        });\n        */\n      }, error => {\n        console.error(\"WebSocket connection error:\", error);\n      });\n    };\n    this.sendMessage = () => {\n      const {\n        userName,\n        apiRoom,\n        newMessage\n      } = this.state;\n      if (newMessage !== '') {\n        //this.stompClient.send(`/app/${apiRoom}`, {}, JSON.stringify({ from: userName, text: newMessage }));\n        console.log(\"I want to say1 : \" + newMessage);\n        console.log(\"I want to say2 : \" + apiRoom);\n        //const myData = localStorage.getItem('nowRoom');\n        this.stompClient.send(`/app/${apiRoom}`, {}, JSON.stringify({\n          from: userName,\n          text: newMessage\n        }));\n        this.setState({\n          newMessage: ''\n        });\n      }\n    };\n    this.showMessageOutput = messageOutput => {\n      console.log(\"Received message:\", messageOutput);\n      if (messageOutput && messageOutput.message && messageOutput.message.text) {\n        const {\n          messages,\n          userName\n        } = this.state;\n        //this.state.from = messageOutput.message.from; // 檢查 messageOutput.message.from\n        const newMessage = {\n          text: messageOutput.message.text,\n          isSentByCurrentUser: messageOutput.message.from === userName\n        };\n        //console.log(\"check1\"+messageOutput.message.from);\n        //console.log(\"check2\"+this.state.from);\n        const updatedMessages = [...messages, newMessage];\n        //console.log(\"check3\"+updatedMessages);\n        this.setState({\n          messages: updatedMessages\n        });\n      } else {\n        console.log(\"Invalid message format:\", messageOutput);\n      }\n    };\n    /*\n       showMessageOutput = (messageOutput) => {\n         const { messages } = this.state;\n         const updatedMessages = [...messages, messageOutput.message.text];\n    \n         this.setState({ messages: updatedMessages });\n       };\n    */\n    this.handleNameChange = event => {\n      this.setState({\n        inputName: event.target.value\n      });\n    };\n    this.handleNameSubmit = () => {\n      this.setState({\n        userName: this.state.inputName\n      });\n    };\n    this.handleMessageChange = event => {\n      this.setState({\n        newMessage: event.target.value\n      });\n    };\n    this.scrollToBottom = () => {\n      // Scroll to the bottom of the message list\n      if (this.messageListRef.current) {\n        this.messageListRef.current.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    };\n    this.handleConfirmation = () => {\n      const {\n        apiRoom,\n        poster\n      } = this.state;\n      const data = {\n        studentID: poster,\n        postId: apiRoom\n      };\n      fetch('/change_post_status', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(response => response.json()).then(result => {\n        // Handle the result as needed\n        console.log('Confirmation result:', result);\n        // Update the UI or take further actions based on the result\n        if (result.success) {\n          this.setState({\n            postConfirmed: true\n          });\n        }\n      }).catch(error => {\n        console.error('Error confirming post:', error);\n      });\n    };\n    this.state = {\n      messages: [],\n      newMessage: '',\n      from: '',\n      connected: false,\n      userName: localStorage.getItem('userName'),\n      apiRoom: localStorage.getItem('nowRoom'),\n      apiRoomName: localStorage.getItem('nowRoomName'),\n      poster: localStorage.getItem('poster'),\n      inputName: '',\n      // 新增的姓名輸入狀態\n      messageData: []\n    };\n    this.stompClient = null;\n    this.messageListRef = /*#__PURE__*/React.createRef();\n  }\n  componentDidMount() {\n    this.fetchData();\n    this.fetchMessageData();\n    this.initializeStompClient();\n  }\n  fetchData() {\n    const {\n      apiRoom\n    } = this.state;\n    const queryParams = new URLSearchParams({\n      where: apiRoom\n    });\n    const url = '/updateRoom?' + queryParams.toString();\n    const data = {\n      \"where\": apiRoom\n    };\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.json()).then(data => {\n      console.log(\"success!!!\");\n    }).catch(error => console.error(error));\n  }\n  fetchMessageData() {\n    const {\n      apiRoom\n    } = this.state;\n    const queryParams = new URLSearchParams({\n      where: apiRoom\n    });\n    const url = '/loadChatRecord?' + queryParams.toString();\n    const formData = {\n      \"where\": apiRoom\n    };\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData)\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n      this.setState({\n        messageData: data\n      });\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n  componentDidUpdate(prevProps, prevState) {\n    // Check if new messages have been added\n    if (prevState.messages.length !== this.state.messages.length) {\n      this.scrollToBottom(); // Scroll to the bottom when new messages arrive\n    }\n  }\n\n  render() {\n    const {\n      messages,\n      newMessage,\n      connected,\n      userName,\n      apiRoomName,\n      inputName,\n      messageData,\n      poster\n    } = this.state;\n    console.log(\"this.state.userName in render:\", this.state.userName);\n    const isPosterSameAsUserName = poster === userName;\n    const Message = _ref => {\n      let {\n        content,\n        isSent\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${isSent ? 'sent' : 'received'}`,\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 7\n      }, this);\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Chatroom\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatroom-header\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/ChatRoomList\",\n          children: /*#__PURE__*/_jsxDEV(Back, {\n            src: back,\n            alt: \"\\u56DE\\u4E0A\\u4E00\\u9801\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [this.state.apiRoomName, isPosterSameAsUserName && /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: this.handleConfirmation,\n            disabled: !connected,\n            children: \"\\u5DF2\\u78BA\\u8A8D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 10\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatroom-messages\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-list\",\n          children: [messageData.map((message, index) => {\n            console.log(\"message:\", message);\n            return /*#__PURE__*/_jsxDEV(Message, {\n              content: message.text,\n              isSent: message.from === userName\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 18\n            }, this);\n          }), messages.map((message, index) => {\n            console.log(\"message:\", message);\n            return /*#__PURE__*/_jsxDEV(Message, {\n              content: message.text,\n              isSent: message.isSentByCurrentUser\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 18\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: this.messageListRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatroom-input\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"enter\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"text\",\n            placeholder: \"\\u8F38\\u5165\\u60F3\\u8AAA\\u7684\\u8A71...\",\n            value: newMessage,\n            onChange: this.handleMessageChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            onClick: this.sendMessage,\n            disabled: !connected,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 12\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 6\n    }, this);\n  }\n}\nexport default ChatRoom;","map":{"version":3,"names":["React","useEffect","useState","SockJS","Stomp","back","Back","Link","jsxDEV","_jsxDEV","ChatRoom","Component","constructor","props","initializeStompClient","socket","stompClient","over","userName","apiRoom","state","console","log","connect","user","frame","setState","connected","subscribe","messageOutput","showMessageOutput","JSON","parse","body","error","sendMessage","newMessage","send","stringify","from","text","message","messages","isSentByCurrentUser","updatedMessages","handleNameChange","event","inputName","target","value","handleNameSubmit","handleMessageChange","scrollToBottom","messageListRef","current","scrollIntoView","behavior","handleConfirmation","poster","data","studentID","postId","fetch","method","headers","then","response","json","result","success","postConfirmed","catch","localStorage","getItem","apiRoomName","messageData","createRef","componentDidMount","fetchData","fetchMessageData","queryParams","URLSearchParams","where","url","toString","formData","componentDidUpdate","prevProps","prevState","length","render","isPosterSameAsUserName","Message","_ref","content","isSent","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","src","alt","type","onClick","disabled","map","index","ref","id","placeholder","onChange"],"sources":["C:/new_IUA/IUA2/my-app/src/chatroom.js"],"sourcesContent":["import './chatroom.css';\nimport React from \"react\";\nimport {useEffect,useState} from \"react\";\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport back from './img/back.png';\nimport {Back}  from './components/Style.js';\nimport { Link } from 'react-router-dom';\n\nclass ChatRoom extends React.Component {\n   constructor(props) {\n     super(props);\n\n     this.state = {\n       messages: [],\n       newMessage: '',\n       from:'',\n       connected: false,\n       userName: localStorage.getItem('userName'),\n       apiRoom: localStorage.getItem('nowRoom'),\n       apiRoomName: localStorage.getItem('nowRoomName'),\n       poster: localStorage.getItem('poster'),\n       inputName: '', // 新增的姓名輸入狀態\n       messageData: [],\n     };\n\n     this.stompClient = null;\n     this.messageListRef = React.createRef();\n   }\n\n   componentDidMount() {\n    this.fetchData();\n    this.fetchMessageData();\n    this.initializeStompClient();\n   }\n\n   initializeStompClient = () => {\n     const socket = new SockJS('/chatroom');\n     this.stompClient = Stomp.over(socket);\n\n     const { userName, apiRoom } = this.state;\n     console.log(\"Initializing WebSocket connection...\"+userName);\n     this.stompClient.connect({ user: userName }, (frame) => {\n     console.log(\"WebSocket connection established:\", frame);\n       this.setState({ connected: true });\n       console.log('Connected: ' + frame);\n       //this.stompClient.subscribe(`/topic/${apiRoom}`\n       this.stompClient.subscribe(`/topic/${apiRoom}`, (messageOutput) => {\n         this.showMessageOutput(JSON.parse(messageOutput.body));\n       });\n        /*\n       this.stompClient.subscribe('/user/subscribe', (messageOutput) => {\n         this.showMessageOutput(JSON.parse(messageOutput.body));\n       });\n       */\n     }, (error) => {\n          console.error(\"WebSocket connection error:\", error);\n     });\n   };\n\n      fetchData() {\n          const { apiRoom } = this.state;\n          const queryParams = new URLSearchParams({\n            where: apiRoom\n          });\n\n          const url = '/updateRoom?' + queryParams.toString();\n\n          const data = {\n             \"where\": apiRoom\n          };\n\n          fetch(url, {\n            method: 'POST',\n             headers: {\n               'Content-Type': 'application/json'\n             },\n                body: JSON.stringify(data)\n             }).then(response => response.json())\n               .then(data => {\n                  console.log(\"success!!!\")\n               }).catch(error =>\n                  console.error(error)\n               );\n      }\n\n      fetchMessageData() {\n        const { apiRoom } = this.state;\n        const queryParams = new URLSearchParams({\n          where: apiRoom \n        });\n    \n        const url = '/loadChatRecord?' + queryParams.toString();\n    \n        const formData = {\n          \"where\": apiRoom\n        };\n    \n        fetch(url, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(formData)\n        })\n          .then(response => response.json())\n          .then(data => {\n            console.log(data);\n            this.setState({ messageData: data });\n          })\n          .catch(error => {\n            console.error(error);\n          });\n      }\n\n   sendMessage = () => {\n     const { userName, apiRoom, newMessage } = this.state;\n\n     if (newMessage !== '') {\n       //this.stompClient.send(`/app/${apiRoom}`, {}, JSON.stringify({ from: userName, text: newMessage }));\n       console.log(\"I want to say1 : \"+newMessage);\n       console.log(\"I want to say2 : \"+apiRoom);\n       //const myData = localStorage.getItem('nowRoom');\n       this.stompClient.send(`/app/${apiRoom}`, {}, JSON.stringify({ from: userName, text: newMessage}));\n       this.setState({ newMessage: '' });\n     }\n   };\n    showMessageOutput = (messageOutput) => {\n      console.log(\"Received message:\", messageOutput);\n\n      if (messageOutput && messageOutput.message && messageOutput.message.text) {\n        const { messages, userName } = this.state;\n        //this.state.from = messageOutput.message.from; // 檢查 messageOutput.message.from\n        const newMessage = {\n          text: messageOutput.message.text,\n          isSentByCurrentUser: messageOutput.message.from === userName\n        };\n        //console.log(\"check1\"+messageOutput.message.from);\n        //console.log(\"check2\"+this.state.from);\n        const updatedMessages = [...messages, newMessage];\n        //console.log(\"check3\"+updatedMessages);\n        this.setState({ messages: updatedMessages });\n      } else {\n        console.log(\"Invalid message format:\", messageOutput);\n      }\n    };\n/*\n   showMessageOutput = (messageOutput) => {\n     const { messages } = this.state;\n     const updatedMessages = [...messages, messageOutput.message.text];\n\n     this.setState({ messages: updatedMessages });\n   };\n*/\n   handleNameChange = (event) => {\n     this.setState({ inputName: event.target.value });\n   };\n\n   handleNameSubmit = () => {\n     this.setState({ userName: this.state.inputName });\n   };\n\n   handleMessageChange = (event) => {\n     this.setState({ newMessage: event.target.value });\n   };\n\n   scrollToBottom = () => {\n    // Scroll to the bottom of the message list\n    if (this.messageListRef.current) {\n      this.messageListRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    // Check if new messages have been added\n    if (prevState.messages.length !== this.state.messages.length) {\n      this.scrollToBottom(); // Scroll to the bottom when new messages arrive\n    }\n  }\n\n  handleConfirmation = () => {\n    const { apiRoom, poster } = this.state;\n  \n    const data = {\n      studentID: poster,\n      postId: apiRoom,\n    };\n  \n    fetch('/change_post_status', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    })\n      .then(response => response.json())\n      .then(result => {\n        // Handle the result as needed\n        console.log('Confirmation result:', result);\n        // Update the UI or take further actions based on the result\n        if (result.success) {\n          this.setState({ postConfirmed: true });\n        }\n      })\n      .catch(error => {\n        console.error('Error confirming post:', error);\n      });\n  };\n   \n\n   render() {\n    const { messages, newMessage, connected, userName, apiRoomName, inputName, messageData, poster } = this.state;\n    console.log(\"this.state.userName in render:\", this.state.userName);\n    const isPosterSameAsUserName = poster === userName;\n    const Message = ({ content, isSent }) => (\n      <div className={`message ${isSent ? 'sent' : 'received'}`}>\n        {content}\n      </div>\n    );\n\n     return (\n     <div className=\"Chatroom\">\n       <div className=\"chatroom-header\">\n          <Link to='/ChatRoomList'>\n              <Back src={back} alt=\"回上一頁\" />\n          </Link>\n         <h1>{this.state.apiRoomName}\n         {isPosterSameAsUserName && \n         <button type=\"button\" onClick={this.handleConfirmation} disabled={!connected}>\n            已確認\n          </button>}\n         </h1>\n       </div>\n       <div className=\"chatroom-messages\" >\n         <div className=\"message-list\" >\n           {messageData.map((message, index) => {\n               console.log(\"message:\", message);\n               return (\n                 <Message\n                   key={index}\n                   content={message.text}\n                   isSent={message.from === userName}\n                 />\n               );\n             })}\n           {messages.map((message, index) => {\n               console.log(\"message:\", message);\n               return (\n                 <Message\n                   key={index}\n                   content={message.text}\n                   isSent={message.isSentByCurrentUser}\n                 />\n               );\n             })}\n             <div ref={this.messageListRef} />\n         </div>\n       </div>\n       <div className=\"chatroom-input\">\n         <div className=\"enter\">\n           <input\n             type=\"text\"\n             id=\"text\"\n             placeholder='輸入想說的話...'\n             value={newMessage}\n             onChange={this.handleMessageChange}\n           />\n           <button type=\"submit\" onClick={this.sendMessage} disabled={!connected}>Send</button>\n         </div>\n       </div>\n     </div>\n     );\n   }\n }\nexport default ChatRoom;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}