{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elain\\\\1112\\\\IUA2\\\\my-app\\\\src\\\\moodChatGPT.js\";\nimport './moodChatGPT.css';\nimport React from \"react\";\nimport back from './img/back.png';\nimport { Back } from './components/Style.js';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MoodChatGPT extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      messages: [],\n      newMessage: ''\n    };\n    this.handleMessageChange = event => {\n      this.setState({\n        newMessage: event.target.value\n      });\n    };\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      const {\n        messages,\n        newMessage\n      } = this.state;\n      if (newMessage.trim() !== '') {\n        const messageObject = {\n          content: newMessage\n        };\n        try {\n          const response = await fetch('/chatGPT/chat', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(messageObject)\n          });\n          if (!response.ok) {\n            throw new Error('Network response was not ok');\n          }\n\n          // Clear the input field and add the user's message to the chat\n          const updatedMessages = [...messages, messageObject];\n          this.setState({\n            messages: updatedMessages,\n            newMessage: ''\n          });\n        } catch (error) {\n          console.error('There was a problem with the fetch operation:', error);\n          // Handle the error, e.g., show an error message to the user\n        }\n      }\n    };\n  }\n\n  render() {\n    const {\n      messages,\n      newMessage\n    } = this.state;\n    const Message = _ref => {\n      let {\n        content,\n        isSent\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${isSent ? 'sent' : 'received'}`,\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this);\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Chatroom\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatroom-header\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/homePage\",\n          children: /*#__PURE__*/_jsxDEV(Back, {\n            src: back,\n            alt: \"\\u56DE\\u4E0A\\u4E00\\u9801\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\u5FC3\\u60C5\\u6A39\\u6D1E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatroom-messages\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-list\",\n          children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sent\",\n            children: message\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatroom-input\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"enter\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"text\",\n            placeholder: \"\\u8F38\\u5165\\u60F3\\u8AAA\\u7684\\u8A71...\",\n            value: newMessage,\n            onChange: this.handleMessageChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            onClick: this.handleSubmit,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 12\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default MoodChatGPT;","map":{"version":3,"names":["React","back","Back","Link","jsxDEV","_jsxDEV","MoodChatGPT","Component","constructor","arguments","state","messages","newMessage","handleMessageChange","event","setState","target","value","handleSubmit","preventDefault","trim","messageObject","content","response","fetch","method","headers","body","JSON","stringify","ok","Error","updatedMessages","error","console","render","Message","_ref","isSent","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","src","alt","map","message","index","type","id","placeholder","onChange","onClick"],"sources":["C:/Users/elain/1112/IUA2/my-app/src/moodChatGPT.js"],"sourcesContent":["import './moodChatGPT.css';\r\nimport React from \"react\";\r\nimport back from './img/back.png';\r\nimport {Back}  from './components/Style.js';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass MoodChatGPT extends React.Component {\r\n  state = {\r\n    messages: [],\r\n    newMessage: ''\r\n  };\r\n\r\n  handleMessageChange = (event) => {\r\n    this.setState({ newMessage: event.target.value });\r\n  };\r\n\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const { messages, newMessage } = this.state;\r\n  \r\n    if (newMessage.trim() !== '') {\r\n      const messageObject = {\r\n        content: newMessage,\r\n      };\r\n  \r\n      try {\r\n        const response = await fetch('/chatGPT/chat', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(messageObject),\r\n        });\r\n  \r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n  \r\n        // Clear the input field and add the user's message to the chat\r\n        const updatedMessages = [...messages, messageObject];\r\n        this.setState({ messages: updatedMessages, newMessage: '' });\r\n      } catch (error) {\r\n        console.error('There was a problem with the fetch operation:', error);\r\n        // Handle the error, e.g., show an error message to the user\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n  render() {\r\n    const { messages, newMessage } = this.state;\r\n    const Message = ({ content, isSent }) => {\r\n      return (\r\n        <div className={`message ${isSent ? 'sent' : 'received'}`}>\r\n          {content}\r\n        </div>\r\n      );\r\n    };\r\n    \r\n    return (\r\n      <div className=\"Chatroom\">\r\n        <div className=\"chatroom-header\">\r\n          <Link to='/homePage'>\r\n              <Back src={back} alt=\"回上一頁\" />\r\n          </Link>\r\n          <h1>心情樹洞</h1>\r\n        </div>\r\n        <div className=\"chatroom-messages\" >\r\n         <div className=\"message-list\" >\r\n            {/* <Message content=\"Hi!\" isSent={false} />\r\n            <Message content=\"嗨嗨\" isSent={false} />\r\n            <Message content=\"嗨嗨\" isSent={false} />\r\n            <Message content=\"嗨嗨\" isSent={false} /> */}\r\n            {messages.map((message, index) => (\r\n              <div key={index} className='sent'>{message}</div>\r\n            ))}\r\n         </div>\r\n       </div>\r\n       <div className=\"chatroom-input\">\r\n         <div className=\"enter\">\r\n           <input\r\n             type=\"text\"\r\n             id=\"text\"\r\n             placeholder='輸入想說的話...'\r\n             value={newMessage}\r\n             onChange={this.handleMessageChange}\r\n           />\r\n           <button type=\"submit\" onClick={this.handleSubmit} >Send</button>\r\n         </div>\r\n       </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MoodChatGPT;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}