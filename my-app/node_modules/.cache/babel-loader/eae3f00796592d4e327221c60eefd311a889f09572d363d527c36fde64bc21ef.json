{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elain\\\\1112\\\\IUA2\\\\my-app\\\\src\\\\ChatRoomList.js\",\n  _s = $RefreshSig$();\n// import './ChatRoomList.css';\n// import React from 'react';\n// import { useEffect, useState, useRef,  } from \"react\";\n// import { Link } from 'react-router-dom';\n// import SockJS from 'sockjs-client';\n// import { Stomp } from '@stomp/stompjs';\n\n// const ChatRoomList = () => {\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [filteredChatRooms, setFilteredChatRooms] = useState([]);\n\n//   const chatRooms = [\n//     { id: 'R1', name: 'room1' },\n//     { id: 'R2', name: 'room2' },\n//     { id: 'R3', name: '徵室友' },\n//     { id: 'R4', name: 'room4' },\n// ];\n//   var stompClient = null;\n//   var socket = new SockJS('/chatroom');\n//             stompClient = Stomp.over(socket);\n//             console.log(\"Connected!!\");\n//             // userName = document.getElementById('from').value;\n//             // stompClient.connect({user:userName}, function(frame) {\n//                 // setConnected(true);\n\n//                 // stompClient.subscribe('/topic/'+ chatRoom.name, function(messageOutput) {\n//                 //     showMessageOutput(JSON.parse(messageOutput.body));\n//                 // });\n\n//                 // // 私人\n//                 // stompClient.subscribe('/user/subscribe', function(messageOutput) {\n//                 //     showMessageOutput(JSON.parse(messageOutput.body));\n//                 // });\n//             // });\n\n//   const handleSearch = (event) => {\n//     const searchTerm = event.target.value;\n//     setSearchTerm(searchTerm);\n\n//     const filteredRooms = chatRooms.filter((room) =>\n//       room.name.toLowerCase().includes(searchTerm.toLowerCase())\n//     );\n//     setFilteredChatRooms(filteredRooms);\n//   };\n\n//   const linkStyle = {\n//     color: 'black', \n//     textDecoration: 'none' // 去除底線\n//   };\n\n//   return (\n//     <div className='ChatRoomList'>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Search chat rooms\"\n//         value={searchTerm}\n//         onChange={handleSearch}\n//       />\n//       <ul>\n//       {searchTerm\n//           ? filteredChatRooms.map((chatRoom) => (\n//             <Link to={`/chatroom/${chatRoom.id}`} style={linkStyle}  key={chatRoom.id}>\n//               <li>\n//                 <span className=\"link-text\">{chatRoom.name}</span>\n//               </li>\n//             </Link>\n//           ))\n//           : chatRooms.map((chatRoom) => (\n//             <Link to={`/chatroom/${chatRoom.id}`} style={linkStyle}  key={chatRoom.id}>\n//               <li>\n//                 <span className=\"link-text\">{chatRoom.name}</span>\n//               </li>\n//             </Link>\n//           ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default ChatRoomList;\n\nimport './ChatRoomList.css';\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoomList = () => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filteredChatRooms, setFilteredChatRooms] = useState([]);\n  const [connected, setConnected] = useState(false);\n  const [stompClient, setStompClient] = useState(null);\n  const chatRooms = [{\n    id: 'R1',\n    name: 'room1'\n  }, {\n    id: 'R2',\n    name: 'room2'\n  }, {\n    id: 'R3',\n    name: '徵室友'\n  }, {\n    id: 'R4',\n    name: 'room4'\n  }];\n  useEffect(() => {\n    const socket = new SockJS('/chatroom');\n    const client = Stomp.over(socket);\n    setStompClient(client);\n    return () => {\n      if (client) {\n        client.disconnect();\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (stompClient && connected) {\n      const subscription = stompClient.subscribe('/user/subscribe', function (messageOutput) {\n        showMessageOutput(JSON.parse(messageOutput.body));\n      });\n      return () => {\n        if (subscription) {\n          subscription.unsubscribe();\n        }\n      };\n    }\n  }, [stompClient, connected]);\n  const handleSearch = event => {\n    const searchTerm = event.target.value;\n    setSearchTerm(searchTerm);\n    const filteredRooms = chatRooms.filter(room => room.name.toLowerCase().includes(searchTerm.toLowerCase()));\n    setFilteredChatRooms(filteredRooms);\n  };\n  const linkStyle = {\n    color: 'black',\n    textDecoration: 'none' // Remove underline\n  };\n\n  const showMessageOutput = message => {\n    // Handle incoming message\n    console.log('Received message:', message);\n  };\n  const connectWebSocket = () => {\n    if (stompClient) {\n      const userName = document.getElementById('from').value;\n      stompClient.connect({\n        user: userName\n      }, function (frame) {\n        setConnected(true);\n        console.log('Connected: ' + frame);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ChatRoomList\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search chat rooms\",\n      value: searchTerm,\n      onChange: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: searchTerm ? filteredChatRooms.map(chatRoom => /*#__PURE__*/_jsxDEV(Link, {\n        to: `/chatroom/${chatRoom.id}`,\n        style: linkStyle,\n        onClick: connectWebSocket,\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"link-text\",\n            children: chatRoom.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }, this)\n      }, chatRoom.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 15\n      }, this)) : chatRooms.map(chatRoom => /*#__PURE__*/_jsxDEV(Link, {\n        to: `/chatroom/${chatRoom.id}`,\n        style: linkStyle,\n        onClick: connectWebSocket,\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"link-text\",\n            children: chatRoom.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 17\n        }, this)\n      }, chatRoom.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoomList, \"1d0tJM3dlWpTeOgBMwGw4+wzIPs=\");\n_c = ChatRoomList;\nexport default ChatRoomList;\nvar _c;\n$RefreshReg$(_c, \"ChatRoomList\");","map":{"version":3,"names":["React","useEffect","useState","Link","SockJS","Stomp","jsxDEV","_jsxDEV","ChatRoomList","_s","searchTerm","setSearchTerm","filteredChatRooms","setFilteredChatRooms","connected","setConnected","stompClient","setStompClient","chatRooms","id","name","socket","client","over","disconnect","subscription","subscribe","messageOutput","showMessageOutput","JSON","parse","body","unsubscribe","handleSearch","event","target","value","filteredRooms","filter","room","toLowerCase","includes","linkStyle","color","textDecoration","message","console","log","connectWebSocket","userName","document","getElementById","connect","user","frame","className","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","chatRoom","to","style","onClick","_c","$RefreshReg$"],"sources":["C:/Users/elain/1112/IUA2/my-app/src/ChatRoomList.js"],"sourcesContent":["// import './ChatRoomList.css';\r\n// import React from 'react';\r\n// import { useEffect, useState, useRef,  } from \"react\";\r\n// import { Link } from 'react-router-dom';\r\n// import SockJS from 'sockjs-client';\r\n// import { Stomp } from '@stomp/stompjs';\r\n\r\n// const ChatRoomList = () => {\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n//   const [filteredChatRooms, setFilteredChatRooms] = useState([]);\r\n\r\n//   const chatRooms = [\r\n//     { id: 'R1', name: 'room1' },\r\n//     { id: 'R2', name: 'room2' },\r\n//     { id: 'R3', name: '徵室友' },\r\n//     { id: 'R4', name: 'room4' },\r\n// ];\r\n//   var stompClient = null;\r\n//   var socket = new SockJS('/chatroom');\r\n//             stompClient = Stomp.over(socket);\r\n//             console.log(\"Connected!!\");\r\n//             // userName = document.getElementById('from').value;\r\n//             // stompClient.connect({user:userName}, function(frame) {\r\n//                 // setConnected(true);\r\n                \r\n\r\n//                 // stompClient.subscribe('/topic/'+ chatRoom.name, function(messageOutput) {\r\n//                 //     showMessageOutput(JSON.parse(messageOutput.body));\r\n//                 // });\r\n\r\n//                 // // 私人\r\n//                 // stompClient.subscribe('/user/subscribe', function(messageOutput) {\r\n//                 //     showMessageOutput(JSON.parse(messageOutput.body));\r\n//                 // });\r\n//             // });\r\n  \r\n//   const handleSearch = (event) => {\r\n//     const searchTerm = event.target.value;\r\n//     setSearchTerm(searchTerm);\r\n\r\n//     const filteredRooms = chatRooms.filter((room) =>\r\n//       room.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n//     );\r\n//     setFilteredChatRooms(filteredRooms);\r\n//   };\r\n\r\n//   const linkStyle = {\r\n//     color: 'black', \r\n//     textDecoration: 'none' // 去除底線\r\n//   };\r\n\r\n//   return (\r\n//     <div className='ChatRoomList'>\r\n//       <input\r\n//         type=\"text\"\r\n//         placeholder=\"Search chat rooms\"\r\n//         value={searchTerm}\r\n//         onChange={handleSearch}\r\n//       />\r\n//       <ul>\r\n//       {searchTerm\r\n//           ? filteredChatRooms.map((chatRoom) => (\r\n//             <Link to={`/chatroom/${chatRoom.id}`} style={linkStyle}  key={chatRoom.id}>\r\n//               <li>\r\n//                 <span className=\"link-text\">{chatRoom.name}</span>\r\n//               </li>\r\n//             </Link>\r\n//           ))\r\n//           : chatRooms.map((chatRoom) => (\r\n//             <Link to={`/chatroom/${chatRoom.id}`} style={linkStyle}  key={chatRoom.id}>\r\n//               <li>\r\n//                 <span className=\"link-text\">{chatRoom.name}</span>\r\n//               </li>\r\n//             </Link>\r\n//           ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ChatRoomList;\r\n\r\nimport './ChatRoomList.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport SockJS from 'sockjs-client';\r\nimport { Stomp } from '@stomp/stompjs';\r\n\r\nconst ChatRoomList = () => {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filteredChatRooms, setFilteredChatRooms] = useState([]);\r\n  const [connected, setConnected] = useState(false);\r\n  const [stompClient, setStompClient] = useState(null);\r\n\r\n  const chatRooms = [\r\n    { id: 'R1', name: 'room1' },\r\n    { id: 'R2', name: 'room2' },\r\n    { id: 'R3', name: '徵室友' },\r\n    { id: 'R4', name: 'room4' },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const socket = new SockJS('/chatroom');\r\n    const client = Stomp.over(socket);\r\n\r\n    setStompClient(client);\r\n\r\n    return () => {\r\n      if (client) {\r\n        client.disconnect();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (stompClient && connected) {\r\n      const subscription = stompClient.subscribe('/user/subscribe', function(messageOutput) {\r\n        showMessageOutput(JSON.parse(messageOutput.body));\r\n      });\r\n\r\n      return () => {\r\n        if (subscription) {\r\n          subscription.unsubscribe();\r\n        }\r\n      };\r\n    }\r\n  }, [stompClient, connected]);\r\n\r\n  const handleSearch = (event) => {\r\n    const searchTerm = event.target.value;\r\n    setSearchTerm(searchTerm);\r\n\r\n    const filteredRooms = chatRooms.filter((room) =>\r\n      room.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n    setFilteredChatRooms(filteredRooms);\r\n  };\r\n\r\n  const linkStyle = {\r\n    color: 'black',\r\n    textDecoration: 'none', // Remove underline\r\n  };\r\n\r\n  const showMessageOutput = (message) => {\r\n    // Handle incoming message\r\n    console.log('Received message:', message);\r\n  };\r\n\r\n  const connectWebSocket = () => {\r\n    if (stompClient) {\r\n      const userName = document.getElementById('from').value;\r\n      stompClient.connect({ user: userName }, function(frame) {\r\n        setConnected(true);\r\n        console.log('Connected: ' + frame);\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"ChatRoomList\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search chat rooms\"\r\n        value={searchTerm}\r\n        onChange={handleSearch}\r\n      />\r\n      <ul>\r\n        {searchTerm\r\n          ? filteredChatRooms.map((chatRoom) => (\r\n              <Link to={`/chatroom/${chatRoom.id}`} style={linkStyle} key={chatRoom.id} onClick={connectWebSocket}>\r\n                <li>\r\n                  <span className=\"link-text\">{chatRoom.name}</span>\r\n                </li>\r\n              </Link>\r\n            ))\r\n          : chatRooms.map((chatRoom) => (\r\n              <Link to={`/chatroom/${chatRoom.id}`} style={linkStyle} key={chatRoom.id} onClick={connectWebSocket}>\r\n                <li>\r\n                  <span className=\"link-text\">{chatRoom.name}</span>\r\n                </li>\r\n              </Link>\r\n            ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoomList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}