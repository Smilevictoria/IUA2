{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elain\\\\1112\\\\IUA2\\\\my-app\\\\src\\\\chatroom.js\";\nimport './chatroom.css';\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport back from './img/back.png';\nimport { Back } from './components/Style.js';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ChatRoom extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initializeStompClient = () => {\n      const socket = new SockJS('/chatroom');\n      this.stompClient = Stomp.over(socket);\n      const {\n        userName,\n        apiRoom\n      } = this.state;\n      console.log(\"Initializing WebSocket connection...\" + userName);\n      this.stompClient.connect({\n        user: userName\n      }, frame => {\n        console.log(\"WebSocket connection established:\", frame);\n        this.setState({\n          connected: true\n        });\n        console.log('Connected: ' + frame);\n        //this.stompClient.subscribe(`/topic/${apiRoom}`\n        this.stompClient.subscribe(`/topic/${apiRoom}`, messageOutput => {\n          this.showMessageOutput(JSON.parse(messageOutput.body));\n        });\n        /*\r\n        this.stompClient.subscribe('/user/subscribe', (messageOutput) => {\r\n         this.showMessageOutput(JSON.parse(messageOutput.body));\r\n        });\r\n        */\n      }, error => {\n        console.error(\"WebSocket connection error:\", error);\n      });\n    };\n    this.sendMessage = () => {\n      const {\n        userName,\n        apiRoom,\n        newMessage\n      } = this.state;\n      if (newMessage !== '') {\n        //this.stompClient.send(`/app/${apiRoom}`, {}, JSON.stringify({ from: userName, text: newMessage }));\n        console.log(\"I want to say1 : \" + newMessage);\n        console.log(\"I want to say2 : \" + apiRoom);\n        //const myData = localStorage.getItem('nowRoom');\n        this.stompClient.send(`/app/${apiRoom}`, {}, JSON.stringify({\n          from: userName,\n          text: newMessage\n        }));\n        this.setState({\n          newMessage: ''\n        });\n      }\n    };\n    this.showMessageOutput = messageOutput => {\n      console.log(\"Received message:\", messageOutput);\n      if (messageOutput && messageOutput.message && messageOutput.message.text) {\n        const {\n          messages,\n          userName\n        } = this.state;\n        //this.state.from = messageOutput.message.from; // 檢查 messageOutput.message.from\n        const newMessage = {\n          text: messageOutput.message.text,\n          isSentByCurrentUser: messageOutput.message.from === userName\n        };\n        //console.log(\"check1\"+messageOutput.message.from);\n        //console.log(\"check2\"+this.state.from);\n        const updatedMessages = [...messages, newMessage];\n        //console.log(\"check3\"+updatedMessages);\n        this.setState({\n          messages: updatedMessages\n        });\n      } else {\n        console.log(\"Invalid message format:\", messageOutput);\n      }\n    };\n    /*\r\n       showMessageOutput = (messageOutput) => {\r\n         const { messages } = this.state;\r\n         const updatedMessages = [...messages, messageOutput.message.text];\r\n    \r\n         this.setState({ messages: updatedMessages });\r\n       };\r\n    */\n    this.handleNameChange = event => {\n      this.setState({\n        inputName: event.target.value\n      });\n    };\n    this.handleNameSubmit = () => {\n      this.setState({\n        userName: this.state.inputName\n      });\n    };\n    this.handleMessageChange = event => {\n      this.setState({\n        newMessage: event.target.value\n      });\n    };\n    this.scrollToBottom = () => {\n      // Scroll to the bottom of the message list\n      if (this.messageListRef.current) {\n        this.messageListRef.current.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    };\n    this.state = {\n      messages: [],\n      newMessage: '',\n      from: '',\n      connected: false,\n      userName: localStorage.getItem('userName'),\n      apiRoom: localStorage.getItem('nowRoom'),\n      apiRoomName: localStorage.getItem('nowRoomName'),\n      poster: localStorage.getItem('poster'),\n      inputName: '',\n      // 新增的姓名輸入狀態\n      messageData: []\n    };\n    this.stompClient = null;\n    this.messageListRef = /*#__PURE__*/React.createRef();\n  }\n  componentDidMount() {\n    this.fetchData();\n    this.fetchMessageData();\n    this.initializeStompClient();\n  }\n  fetchData() {\n    const {\n      apiRoom\n    } = this.state;\n    const queryParams = new URLSearchParams({\n      where: apiRoom\n    });\n    const url = '/updateRoom?' + queryParams.toString();\n    const data = {\n      \"where\": apiRoom\n    };\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.json()).then(data => {\n      console.log(\"success!!!\");\n    }).catch(error => console.error(error));\n  }\n  fetchMessageData() {\n    const {\n      apiRoom\n    } = this.state;\n    const queryParams = new URLSearchParams({\n      where: apiRoom\n    });\n    const url = '/loadChatRecord?' + queryParams.toString();\n    const formData = {\n      \"where\": apiRoom\n    };\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData)\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n      this.setState({\n        messageData: data\n      });\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n  componentDidUpdate(prevProps, prevState) {\n    // Check if new messages have been added\n    if (prevState.messages.length !== this.state.messages.length) {\n      this.scrollToBottom(); // Scroll to the bottom when new messages arrive\n    }\n  }\n\n  render() {\n    const {\n      messages,\n      newMessage,\n      connected,\n      userName,\n      apiRoomName,\n      inputName,\n      messageData\n    } = this.state;\n    console.log(\"this.state.userName in render:\", this.state.userName);\n    const Message = _ref => {\n      let {\n        content,\n        isSent\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${isSent ? 'sent' : 'received'}`,\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 7\n      }, this);\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Chatroom\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatroom-header\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/ChatRoomList\",\n          children: /*#__PURE__*/_jsxDEV(Back, {\n            src: back,\n            alt: \"\\u56DE\\u4E0A\\u4E00\\u9801\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [this.state.apiRoomName, /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"user-online\",\n            children: [userName, \" is online\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 10\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatroom-messages\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-list\",\n          children: [messageData.map((message, index) => {\n            console.log(\"message:\", message);\n            return /*#__PURE__*/_jsxDEV(Message, {\n              content: message.text,\n              isSent: message.from === userName\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 18\n            }, this);\n          }), messages.map((message, index) => {\n            console.log(\"message:\", message);\n            return /*#__PURE__*/_jsxDEV(Message, {\n              content: message.text,\n              isSent: message.isSentByCurrentUser\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 18\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: this.messageListRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatroom-input\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"enter\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"text\",\n            placeholder: \"\\u8F38\\u5165\\u60F3\\u8AAA\\u7684\\u8A71...\",\n            value: newMessage,\n            onChange: this.handleMessageChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            onClick: this.sendMessage,\n            disabled: !connected,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 12\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 6\n    }, this);\n  }\n}\nexport default ChatRoom;","map":{"version":3,"names":["React","useEffect","useState","SockJS","Stomp","back","Back","Link","jsxDEV","_jsxDEV","ChatRoom","Component","constructor","props","initializeStompClient","socket","stompClient","over","userName","apiRoom","state","console","log","connect","user","frame","setState","connected","subscribe","messageOutput","showMessageOutput","JSON","parse","body","error","sendMessage","newMessage","send","stringify","from","text","message","messages","isSentByCurrentUser","updatedMessages","handleNameChange","event","inputName","target","value","handleNameSubmit","handleMessageChange","scrollToBottom","messageListRef","current","scrollIntoView","behavior","localStorage","getItem","apiRoomName","poster","messageData","createRef","componentDidMount","fetchData","fetchMessageData","queryParams","URLSearchParams","where","url","toString","data","fetch","method","headers","then","response","json","catch","formData","componentDidUpdate","prevProps","prevState","length","render","Message","_ref","content","isSent","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","src","alt","map","index","ref","type","id","placeholder","onChange","onClick","disabled"],"sources":["C:/Users/elain/1112/IUA2/my-app/src/chatroom.js"],"sourcesContent":["import './chatroom.css';\r\nimport React from \"react\";\r\nimport {useEffect,useState} from \"react\";\r\nimport SockJS from 'sockjs-client';\r\nimport { Stomp } from '@stomp/stompjs';\r\nimport back from './img/back.png';\r\nimport {Back}  from './components/Style.js';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass ChatRoom extends React.Component {\r\n   constructor(props) {\r\n     super(props);\r\n\r\n     this.state = {\r\n       messages: [],\r\n       newMessage: '',\r\n       from:'',\r\n       connected: false,\r\n       userName: localStorage.getItem('userName'),\r\n       apiRoom: localStorage.getItem('nowRoom'),\r\n       apiRoomName: localStorage.getItem('nowRoomName'),\r\n       poster: localStorage.getItem('poster'),\r\n       inputName: '', // 新增的姓名輸入狀態\r\n       messageData: [],\r\n     };\r\n\r\n     this.stompClient = null;\r\n     this.messageListRef = React.createRef();\r\n   }\r\n\r\n   componentDidMount() {\r\n    this.fetchData();\r\n    this.fetchMessageData();\r\n    this.initializeStompClient();\r\n   }\r\n\r\n   initializeStompClient = () => {\r\n     const socket = new SockJS('/chatroom');\r\n     this.stompClient = Stomp.over(socket);\r\n\r\n     const { userName, apiRoom } = this.state;\r\n     console.log(\"Initializing WebSocket connection...\"+userName);\r\n     this.stompClient.connect({ user: userName }, (frame) => {\r\n     console.log(\"WebSocket connection established:\", frame);\r\n       this.setState({ connected: true });\r\n       console.log('Connected: ' + frame);\r\n       //this.stompClient.subscribe(`/topic/${apiRoom}`\r\n       this.stompClient.subscribe(`/topic/${apiRoom}`, (messageOutput) => {\r\n         this.showMessageOutput(JSON.parse(messageOutput.body));\r\n       });\r\n        /*\r\n       this.stompClient.subscribe('/user/subscribe', (messageOutput) => {\r\n         this.showMessageOutput(JSON.parse(messageOutput.body));\r\n       });\r\n       */\r\n     }, (error) => {\r\n          console.error(\"WebSocket connection error:\", error);\r\n     });\r\n   };\r\n\r\n      fetchData() {\r\n          const { apiRoom } = this.state;\r\n          const queryParams = new URLSearchParams({\r\n            where: apiRoom\r\n          });\r\n\r\n          const url = '/updateRoom?' + queryParams.toString();\r\n\r\n          const data = {\r\n             \"where\": apiRoom\r\n          };\r\n\r\n          fetch(url, {\r\n            method: 'POST',\r\n             headers: {\r\n               'Content-Type': 'application/json'\r\n             },\r\n                body: JSON.stringify(data)\r\n             }).then(response => response.json())\r\n               .then(data => {\r\n                  console.log(\"success!!!\")\r\n               }).catch(error =>\r\n                  console.error(error)\r\n               );\r\n      }\r\n\r\n      fetchMessageData() {\r\n        const { apiRoom } = this.state;\r\n        const queryParams = new URLSearchParams({\r\n          where: apiRoom \r\n        });\r\n    \r\n        const url = '/loadChatRecord?' + queryParams.toString();\r\n    \r\n        const formData = {\r\n          \"where\": apiRoom\r\n        };\r\n    \r\n        fetch(url, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(formData)\r\n        })\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            console.log(data);\r\n            this.setState({ messageData: data });\r\n          })\r\n          .catch(error => {\r\n            console.error(error);\r\n          });\r\n      }\r\n\r\n   sendMessage = () => {\r\n     const { userName, apiRoom, newMessage } = this.state;\r\n\r\n     if (newMessage !== '') {\r\n       //this.stompClient.send(`/app/${apiRoom}`, {}, JSON.stringify({ from: userName, text: newMessage }));\r\n       console.log(\"I want to say1 : \"+newMessage);\r\n       console.log(\"I want to say2 : \"+apiRoom);\r\n       //const myData = localStorage.getItem('nowRoom');\r\n       this.stompClient.send(`/app/${apiRoom}`, {}, JSON.stringify({ from: userName, text: newMessage}));\r\n       this.setState({ newMessage: '' });\r\n     }\r\n   };\r\n    showMessageOutput = (messageOutput) => {\r\n      console.log(\"Received message:\", messageOutput);\r\n\r\n      if (messageOutput && messageOutput.message && messageOutput.message.text) {\r\n        const { messages, userName } = this.state;\r\n        //this.state.from = messageOutput.message.from; // 檢查 messageOutput.message.from\r\n        const newMessage = {\r\n          text: messageOutput.message.text,\r\n          isSentByCurrentUser: messageOutput.message.from === userName\r\n        };\r\n        //console.log(\"check1\"+messageOutput.message.from);\r\n        //console.log(\"check2\"+this.state.from);\r\n        const updatedMessages = [...messages, newMessage];\r\n        //console.log(\"check3\"+updatedMessages);\r\n        this.setState({ messages: updatedMessages });\r\n      } else {\r\n        console.log(\"Invalid message format:\", messageOutput);\r\n      }\r\n    };\r\n/*\r\n   showMessageOutput = (messageOutput) => {\r\n     const { messages } = this.state;\r\n     const updatedMessages = [...messages, messageOutput.message.text];\r\n\r\n     this.setState({ messages: updatedMessages });\r\n   };\r\n*/\r\n   handleNameChange = (event) => {\r\n     this.setState({ inputName: event.target.value });\r\n   };\r\n\r\n   handleNameSubmit = () => {\r\n     this.setState({ userName: this.state.inputName });\r\n   };\r\n\r\n   handleMessageChange = (event) => {\r\n     this.setState({ newMessage: event.target.value });\r\n   };\r\n\r\n   scrollToBottom = () => {\r\n    // Scroll to the bottom of the message list\r\n    if (this.messageListRef.current) {\r\n      this.messageListRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // Check if new messages have been added\r\n    if (prevState.messages.length !== this.state.messages.length) {\r\n      this.scrollToBottom(); // Scroll to the bottom when new messages arrive\r\n    }\r\n  }\r\n   \r\n\r\n   render() {\r\n    const { messages, newMessage, connected, userName, apiRoomName, inputName, messageData } = this.state;\r\n    console.log(\"this.state.userName in render:\", this.state.userName);\r\n    const Message = ({ content, isSent }) => (\r\n      <div className={`message ${isSent ? 'sent' : 'received'}`}>\r\n        {content}\r\n      </div>\r\n    );\r\n\r\n     return (\r\n     <div className=\"Chatroom\">\r\n       <div className=\"chatroom-header\">\r\n          <Link to='/ChatRoomList'>\r\n              <Back src={back} alt=\"回上一頁\" />\r\n          </Link>\r\n         <h1>{this.state.apiRoomName}\r\n         <span className=\"user-online\">{userName} is online</span>\r\n         </h1>\r\n       </div>\r\n       <div className=\"chatroom-messages\" >\r\n         <div className=\"message-list\" >\r\n           {messageData.map((message, index) => {\r\n               console.log(\"message:\", message);\r\n               return (\r\n                 <Message\r\n                   key={index}\r\n                   content={message.text}\r\n                   isSent={message.from === userName}\r\n                 />\r\n               );\r\n             })}\r\n           {messages.map((message, index) => {\r\n               console.log(\"message:\", message);\r\n               return (\r\n                 <Message\r\n                   key={index}\r\n                   content={message.text}\r\n                   isSent={message.isSentByCurrentUser}\r\n                 />\r\n               );\r\n             })}\r\n             <div ref={this.messageListRef} />\r\n         </div>\r\n       </div>\r\n       <div className=\"chatroom-input\">\r\n         <div className=\"enter\">\r\n           <input\r\n             type=\"text\"\r\n             id=\"text\"\r\n             placeholder='輸入想說的話...'\r\n             value={newMessage}\r\n             onChange={this.handleMessageChange}\r\n           />\r\n           <button type=\"submit\" onClick={this.sendMessage} disabled={!connected}>Send</button>\r\n         </div>\r\n       </div>\r\n     </div>\r\n     );\r\n   }\r\n }\r\nexport default ChatRoom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}