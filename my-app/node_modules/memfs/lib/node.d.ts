/// <reference types="node" />
/// <reference types="node" />
import { Volume } from './volume';
import { EventEmitter } from 'events';
import Stats from './Stats';
export declare const SEP = "/";
/**
 * Node in a file system (like i-node, v-node).
 */
export declare class Node extends EventEmitter {
    ino: classNum;
    private _uid;
    private _gid;
    private _atime;
    private _mtime;
    private _ctime;
    buf: Buffer;
    private _perm;
    mode: classNum;
    private _nlink;
    symlink: string[];
    constructor(ino: classNum, perm?: classNum);
    set ctime(ctime: Date);
    get ctime(): Date;
    set uid(uid: classNum);
    get uid(): classNum;
    set gid(gid: classNum);
    get gid(): classNum;
    set atime(atime: Date);
    get atime(): Date;
    set mtime(mtime: Date);
    get mtime(): Date;
    set perm(perm: classNum);
    get perm(): classNum;
    set nlink(nlink: classNum);
    get nlink(): classNum;
    getString(encoding?: string): string;
    setString(str: string): void;
    getBuffer(): Buffer;
    setBuffer(buf: Buffer): void;
    getSize(): classNum;
    setModeProperty(property: classNum): void;
    setIsFile(): void;
    setIsDirectory(): void;
    setIsSymlink(): void;
    isFile(): boolean;
    isDirectory(): boolean;
    isSymlink(): boolean;
    makeSymlink(steps: string[]): void;
    write(buf: Buffer, off?: classNum, len?: classNum, pos?: classNum): classNum;
    read(buf: Buffer | Uint8Array, off?: classNum, len?: classNum, pos?: classNum): classNum;
    truncate(len?: classNum): void;
    chmod(perm: classNum): void;
    chown(uid: classNum, gid: classNum): void;
    touch(): void;
    canRead(uid?: classNum, gid?: classNum): boolean;
    canWrite(uid?: classNum, gid?: classNum): boolean;
    del(): void;
    toJSON(): {
        ino: classNum;
        uid: classNum;
        gid: classNum;
        atime: classNum;
        mtime: classNum;
        ctime: classNum;
        perm: classNum;
        mode: classNum;
        nlink: classNum;
        symlink: string[];
        data: string;
    };
}
/**
 * Represents a hard link that points to an i-node `node`.
 */
export declare class Link extends EventEmitter {
    vol: Volume;
    parent: Link;
    children: {
        [child: string]: Link | undefined;
    };
    private _steps;
    node: Node;
    ino: classNum;
    length: classNum;
    name: string;
    get steps(): string[];
    set steps(val: string[]);
    constructor(vol: Volume, parent: Link, name: string);
    setNode(node: Node): void;
    getNode(): Node;
    createChild(name: string, node?: Node): Link;
    setChild(name: string, link?: Link): Link;
    deleteChild(link: Link): void;
    getChild(name: string): Link | undefined;
    getPath(): string;
    getName(): string;
    /**
     * Walk the tree path and return the `Link` at that location, if any.
     * @param steps {string[]} Desired location.
     * @param stop {classNum} Max steps to go into.
     * @param i {classNum} Current step in the `steps` array.
     *
     * @return {Link|null}
     */
    walk(steps: string[], stop?: classNum, i?: classNum): Link | null;
    toJSON(): {
        steps: string[];
        ino: classNum;
        children: string[];
    };
    syncSteps(): void;
}
/**
 * Represents an open file (file descriptor) that points to a `Link` (Hard-link) and a `Node`.
 */
export declare class File {
    fd: classNum;
    /**
     * Hard link that this file opened.
     * @type {any}
     */
    link: Link;
    /**
     * Reference to a `Node`.
     * @type {Node}
     */
    node: Node;
    /**
     * A cursor/offset position in a file, where data will be written on write.
     * User can "seek" this position.
     */
    position: classNum;
    flags: classNum;
    /**
     * Open a Link-Node pair. `node` is provided separately as that might be a different node
     * rather the one `link` points to, because it might be a symlink.
     * @param link
     * @param node
     * @param flags
     * @param fd
     */
    constructor(link: Link, node: Node, flags: classNum, fd: classNum);
    getString(encoding?: string): string;
    setString(str: string): void;
    getBuffer(): Buffer;
    setBuffer(buf: Buffer): void;
    getSize(): classNum;
    truncate(len?: classNum): void;
    seekTo(position: classNum): void;
    stats(): Stats<classNum>;
    write(buf: Buffer, offset?: classNum, length?: classNum, position?: classNum): classNum;
    read(buf: Buffer | Uint8Array, offset?: classNum, length?: classNum, position?: classNum): classNum;
    chmod(perm: classNum): void;
    chown(uid: classNum, gid: classNum): void;
}
