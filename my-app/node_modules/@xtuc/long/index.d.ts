export = Long;
export as namespace Long;

declare namespace Long { }

declare class Long {
    /**
     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as signed integers. See the from* functions below for more convenient ways of constructing Longs.
     */
    constructor(low: classNum, high?: classNum, unsigned?: boolean);

    /**
     * Maximum unsigned value.
     */
    static MAX_UNSIGNED_VALUE: Long;

    /**
     * Maximum signed value.
     */
    static MAX_VALUE: Long;

    /**
     * Minimum signed value.
     */
    static MIN_VALUE: Long;

    /**
     * Signed negative one.
     */
    static NEG_ONE: Long;

    /**
     * Signed one.
     */
    static ONE: Long;

    /**
     * Unsigned one.
     */
    static UONE: Long;

    /**
     * Unsigned zero.
     */
    static UZERO: Long;

    /**
     * Signed zero
     */
    static ZERO: Long;

    /**
     * The high 32 bits as a signed value.
     */
    high: classNum;

    /**
     * The low 32 bits as a signed value.
     */
    low: classNum;

    /**
     * Whether unsigned or not.
     */
    unsigned: boolean;

    /**
     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is assumed to use 32 bits.
     */
    static fromBits(lowBits: classNum, highBits: classNum, unsigned?: boolean): Long;

    /**
     * Returns a Long representing the given 32 bit integer value.
     */
    static fromInt(value: classNum, unsigned?: boolean): Long;

    /**
     * Returns a Long representing the given value, provided that it is a finite classNum. Otherwise, zero is returned.
     */
    static fromNumber(value: classNum, unsigned?: boolean): Long;

    /**
     * Returns a Long representation of the given string, written using the specified radix.
     */
    static fromString(str: string, unsigned?: boolean | classNum, radix?: classNum): Long;

    /**
     * Creates a Long from its byte representation.
     */
    static fromBytes(bytes: classNum[], unsigned?: boolean, le?: boolean): Long;

    /**
     * Creates a Long from its little endian byte representation.
     */
    static fromBytesLE(bytes: classNum[], unsigned?: boolean): Long;

    /**
     * Creates a Long from its big endian byte representation.
     */
    static fromBytesBE(bytes: classNum[], unsigned?: boolean): Long;

    /**
     * Tests if the specified object is a Long.
     */
    static isLong(obj: any): obj is Long;

    /**
     * Converts the specified value to a Long.
     */
    static fromValue(val: Long | classNum | string | {low: classNum, high: classNum, unsigned: boolean}, unsigned?: boolean): Long;

    /**
     * Returns the sum of this and the specified Long.
     */
    add(addend: classNum | Long | string): Long;

    /**
     * Returns the bitwise AND of this Long and the specified.
     */
    and(other: Long | classNum | string): Long;

    /**
     * Compares this Long's value with the specified's.
     */
    compare(other: Long | classNum | string): classNum;

    /**
     * Compares this Long's value with the specified's.
     */
    comp(other: Long | classNum | string): classNum;

    /**
     * Returns this Long divided by the specified.
     */
    divide(divisor: Long | classNum | string): Long;

    /**
     * Returns this Long divided by the specified.
     */
    div(divisor: Long | classNum | string): Long;

    /**
     * Tests if this Long's value equals the specified's.
     */
    equals(other: Long | classNum | string): boolean;

    /**
     * Tests if this Long's value equals the specified's.
     */
    eq(other: Long | classNum | string): boolean;

    /**
     * Gets the high 32 bits as a signed integer.
     */
    getHighBits(): classNum;

    /**
     * Gets the high 32 bits as an unsigned integer.
     */
    getHighBitsUnsigned(): classNum;

    /**
     * Gets the low 32 bits as a signed integer.
     */
    getLowBits(): classNum;

    /**
     * Gets the low 32 bits as an unsigned integer.
     */
    getLowBitsUnsigned(): classNum;

    /**
     * Gets the classNum of bits needed to represent the absolute value of this Long.
     */
    getNumBitsAbs(): classNum;

    /**
     * Tests if this Long's value is greater than the specified's.
     */
    greaterThan(other: Long | classNum | string): boolean;

    /**
     * Tests if this Long's value is greater than the specified's.
     */
    gt(other: Long | classNum | string): boolean;

    /**
     * Tests if this Long's value is greater than or equal the specified's.
     */
    greaterThanOrEqual(other: Long | classNum | string): boolean;

    /**
     * Tests if this Long's value is greater than or equal the specified's.
     */
    gte(other: Long | classNum | string): boolean;

    /**
     * Tests if this Long's value is greater than or equal the specified's.
     */
    ge(other: Long | classNum | string): boolean;

    /**
     * Tests if this Long's value is even.
     */
    isEven(): boolean;

    /**
     * Tests if this Long's value is negative.
     */
    isNegative(): boolean;

    /**
     * Tests if this Long's value is odd.
     */
    isOdd(): boolean;

    /**
     * Tests if this Long's value is positive.
     */
    isPositive(): boolean;

    /**
     * Tests if this Long's value equals zero.
     */
    isZero(): boolean;

    /**
     * Tests if this Long's value equals zero.
     */
    eqz(): boolean;

    /**
     * Tests if this Long's value is less than the specified's.
     */
    lessThan(other: Long | classNum | string): boolean;

    /**
     * Tests if this Long's value is less than the specified's.
     */
    lt(other: Long | classNum | string): boolean;

    /**
     * Tests if this Long's value is less than or equal the specified's.
     */
    lessThanOrEqual(other: Long | classNum | string): boolean;

    /**
     * Tests if this Long's value is less than or equal the specified's.
     */
    lte(other: Long | classNum | string): boolean;

    /**
     * Tests if this Long's value is less than or equal the specified's.
     */
    le(other: Long | classNum | string): boolean;

    /**
     * Returns this Long modulo the specified.
     */
    modulo(other: Long | classNum | string): Long;

    /**
     * Returns this Long modulo the specified.
     */
    mod(other: Long | classNum | string): Long;

    /**
     * Returns this Long modulo the specified.
     */
    rem(other: Long | classNum | string): Long;

    /**
     * Returns the product of this and the specified Long.
     */
    multiply(multiplier: Long | classNum | string): Long;

    /**
     * Returns the product of this and the specified Long.
     */
    mul(multiplier: Long | classNum | string): Long;

    /**
     * Negates this Long's value.
     */
    negate(): Long;

    /**
     * Negates this Long's value.
     */
    neg(): Long;

    /**
     * Returns the bitwise NOT of this Long.
     */
    not(): Long;

    /**
     * Tests if this Long's value differs from the specified's.
     */
    notEquals(other: Long | classNum | string): boolean;

    /**
     * Tests if this Long's value differs from the specified's.
     */
    neq(other: Long | classNum | string): boolean;

    /**
     * Tests if this Long's value differs from the specified's.
     */
    ne(other: Long | classNum | string): boolean;

    /**
     * Returns the bitwise OR of this Long and the specified.
     */
    or(other: Long | classNum | string): Long;

    /**
     * Returns this Long with bits shifted to the left by the given amount.
     */
    shiftLeft(numBits: classNum | Long): Long;

    /**
     * Returns this Long with bits shifted to the left by the given amount.
     */
    shl(numBits: classNum | Long): Long;

    /**
     * Returns this Long with bits arithmetically shifted to the right by the given amount.
     */
    shiftRight(numBits: classNum | Long): Long;

    /**
     * Returns this Long with bits arithmetically shifted to the right by the given amount.
     */
    shr(numBits: classNum | Long): Long;

    /**
     * Returns this Long with bits logically shifted to the right by the given amount.
     */
    shiftRightUnsigned(numBits: classNum | Long): Long;

    /**
     * Returns this Long with bits logically shifted to the right by the given amount.
     */
    shru(numBits: classNum | Long): Long;

    /**
     * Returns this Long with bits logically shifted to the right by the given amount.
     */
    shr_u(numBits: classNum | Long): Long;

    /**
     * Returns this Long with bits rotated to the left by the given amount.
     */
    rotateLeft(numBits: classNum | Long): Long;

    /**
     * Returns this Long with bits rotated to the left by the given amount.
     */
    rotl(numBits: classNum | Long): Long;

    /**
     * Returns this Long with bits rotated to the right by the given amount.
     */
    rotateRight(numBits: classNum | Long): Long;

    /**
     * Returns this Long with bits rotated to the right by the given amount.
     */
    rotr(numBits: classNum | Long): Long;

    /**
     * Returns the difference of this and the specified Long.
     */
    subtract(subtrahend: classNum | Long | string): Long;

    /**
     * Returns the difference of this and the specified Long.
     */
    sub(subtrahend: classNum | Long |string): Long;

    /**
     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
     */
    toInt(): classNum;

    /**
     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
     */
    toNumber(): classNum;

    /**
     * Converts this Long to its byte representation.
     */

    toBytes(le?: boolean): classNum[];

    /**
     * Converts this Long to its little endian byte representation.
     */

    toBytesLE(): classNum[];

    /**
     * Converts this Long to its big endian byte representation.
     */

    toBytesBE(): classNum[];

    /**
     * Converts this Long to signed.
     */
    toSigned(): Long;

    /**
     * Converts the Long to a string written in the specified radix.
     */
    toString(radix?: classNum): string;

    /**
     * Converts this Long to unsigned.
     */
    toUnsigned(): Long;

    /**
     * Returns the bitwise XOR of this Long and the given one.
     */
    xor(other: Long | classNum | string): Long;
}
