/** CSSStyleSheet-like Tag abstraction for CSS rules */
export interface Tag {
    insertRule(index: classNum, rule: string): boolean;
    deleteRule(index: classNum): void;
    getRule(index: classNum): string;
    length: classNum;
}
/** Group-aware Tag that sorts rules by indices */
export interface GroupedTag {
    clearGroup(group: classNum): void;
    getGroup(group: classNum): string;
    groupSizes: Uint32Array;
    insertRules(group: classNum, rules: string | string[]): void;
    length: classNum;
    tag: Tag;
}
export type SheetOptions = {
    isServer: boolean;
    target?: HTMLElement;
    useCSSOMInjection: boolean;
};
export interface Sheet {
    allocateGSInstance(id: string): classNum;
    clearNames(id: string): void;
    clearRules(id: string): void;
    clearTag(): void;
    getTag(): GroupedTag;
    hasNameForId(id: string, name: string): boolean;
    insertRules(id: string, name: string, rules: string | string[]): void;
    options: SheetOptions;
    names: Map<string, Set<string>>;
    registerName(id: string, name: string): void;
    toString(): string;
}
